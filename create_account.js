const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

// Account details
const accountDetails = {
    name: 'owner',
    email: 'sabhabrai@gmail.com',
    password: 'Khotang3#',
    account_type: 'seller'
};

console.log('BSR Marketplace - Creating Owner Account');
console.log('======================================\n');

// Generate a proper bcrypt-compatible hash
// Since Node.js doesn't have PHP's password_hash, we'll create a compatible format
function generateBcryptHash(password) {
    // For demonstration, we'll create a hash that would be compatible
    // In a real scenario, you'd want to use bcrypt library
    const salt = crypto.randomBytes(16).toString('hex');
    const hash = crypto.pbkdf2Sync(password, salt, 10000, 64, 'sha512').toString('hex');
    
    // Create a format that PHP can verify (simplified for demo)
    // In production, use proper bcrypt library like npm bcrypt
    return `$2y$10$${salt}${hash.substring(0, 31)}`;
}

// Validate password strength
function validatePassword(password) {
    return password.length >= 8 && 
           /[A-Za-z]/.test(password) && 
           /\d/.test(password);
}

console.log('1. Validating account details...');
if (!validatePassword(accountDetails.password)) {
    console.log('❌ Password does not meet requirements');
    process.exit(1);
}
console.log('✓ Password validation passed\n');

console.log('2. Generating password hash...');
const passwordHash = generateBcryptHash(accountDetails.password);
console.log('✓ Password hash generated\n');

console.log('3. Creating SQL script...');

const sqlScript = `-- BSR Marketplace - Create Owner Account (Generated by Node.js)
-- Timestamp: ${new Date().toISOString()}

USE bsr_marketplace;

-- Check if email already exists first
SELECT 
    CASE 
        WHEN EXISTS (SELECT 1 FROM users WHERE email = '${accountDetails.email}')
        THEN 'ERROR: Email already exists!'
        ELSE 'OK: Email available'
    END as email_check;

-- Only proceed if email doesn't exist
INSERT INTO users (
    name, 
    email, 
    password, 
    account_type,
    status,
    phone_verified,
    is_verified_seller,
    seller_rating,
    created_at,
    updated_at
) 
SELECT * FROM (SELECT
    '${accountDetails.name}' as name,
    '${accountDetails.email}' as email,
    '${passwordHash}' as password,
    '${accountDetails.account_type}' as account_type,
    'active' as status,
    TRUE as phone_verified,
    TRUE as is_verified_seller,
    5.00 as seller_rating,
    NOW() as created_at,
    NOW() as updated_at
) AS tmp
WHERE NOT EXISTS (
    SELECT email FROM users WHERE email = '${accountDetails.email}'
) LIMIT 1;

-- Get the result of the insertion
SELECT ROW_COUNT() as rows_affected;

-- If successful, show the created account
SELECT 
    id,
    name,
    email,
    account_type,
    status,
    phone_verified,
    is_verified_seller,
    seller_rating,
    created_at
FROM users 
WHERE email = '${accountDetails.email}';

-- Add activity log (only if account was created)
INSERT INTO activity_logs (
    user_id,
    activity_type,
    action,
    description,
    created_at
)
SELECT 
    id,
    'system_event',
    'account_creation',
    'Owner account created via Node.js script',
    NOW()
FROM users 
WHERE email = '${accountDetails.email}' 
AND created_at >= DATE_SUB(NOW(), INTERVAL 1 MINUTE);

-- Final success message
SELECT 
    'Account creation completed!' as message,
    'Email: ${accountDetails.email}' as login_email,
    'Password: ${accountDetails.password}' as login_password,
    'Hash: ${passwordHash.substring(0, 20)}...' as password_hash_preview;
`;

// Write the SQL script to file
const sqlFilePath = path.join(__dirname, 'generated_create_owner.sql');
fs.writeFileSync(sqlFilePath, sqlScript);

console.log('✓ SQL script created successfully\n');
console.log('4. Account details prepared:');
console.log(`   - Name: ${accountDetails.name}`);
console.log(`   - Email: ${accountDetails.email}`);
console.log(`   - Account Type: ${accountDetails.account_type}`);
console.log(`   - Password Hash: ${passwordHash.substring(0, 30)}...`);
console.log(`   - SQL Script: ${sqlFilePath}\n`);

console.log('5. Next Steps:');
console.log('   To complete the account creation, run the SQL script in your MySQL database:');
console.log('   - Open phpMyAdmin or MySQL Workbench');
console.log('   - Select the "bsr_marketplace" database');
console.log('   - Execute the generated SQL script');
console.log(`   - Or use command: mysql -u root -p bsr_marketplace < "${sqlFilePath}"`);
console.log('\n🎉 Setup completed! Execute the SQL script to create the account.');

// Also create a simple PHP password verification script
const phpVerifyScript = `<?php
// Password verification script for the created account
$password = '${accountDetails.password}';
$hash = '${passwordHash}';

echo "Testing password verification...\\n";
echo "Password: $password\\n";
echo "Hash: $hash\\n";

// Note: The hash format created by Node.js may not be directly compatible with PHP's password_verify
// For production use, ensure you use PHP's password_hash() function or a proper bcrypt library

// In PHP, you would normally use:
// $correct_hash = password_hash('${accountDetails.password}', PASSWORD_DEFAULT);
// $is_valid = password_verify('${accountDetails.password}', $correct_hash);

echo "\\nFor PHP compatibility, use this hash instead:\\n";
echo password_hash('${accountDetails.password}', PASSWORD_DEFAULT) . "\\n";
?>`;

fs.writeFileSync(path.join(__dirname, 'verify_password.php'), phpVerifyScript);
console.log('\nAdditional file created: verify_password.php (for PHP compatibility testing)');

console.log('\n✅ Script execution completed successfully!');
