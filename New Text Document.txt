<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BSR - Local Buy, Sell, Rent Marketplace</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6;
            color: #1a1a1a;
            background: #fafafa;
        }

        /* Header */
        header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
            position: fixed;
            width: 100%;
            top: 0;
            z-index: 1000;
        }

        .header-container {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 2rem;
        }

        .logo {
            font-size: 1.8rem;
            font-weight: 800;
            color: #2563eb;
            text-decoration: none;
            letter-spacing: -0.5px;
        }

        .search-container {
            flex: 1;
            max-width: 500px;
            margin: 0 2rem;
            position: relative;
        }

        .search-bar {
            width: 100%;
            padding: 14px 20px 14px 50px;
            border: 2px solid #e5e7eb;
            border-radius: 50px;
            font-size: 1rem;
            outline: none;
            transition: all 0.3s ease;
            background: white;
        }

        .search-bar:focus {
            border-color: #2563eb;
            box-shadow: 0 0 0 4px rgba(37, 99, 235, 0.1);
        }

        .search-icon {
            position: absolute;
            left: 18px;
            top: 50%;
            transform: translateY(-50%);
            color: #6b7280;
            font-size: 1.2rem;
        }

        .nav-links {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .nav-btn {
            padding: 10px 20px;
            border-radius: 25px;
            text-decoration: none;
            font-weight: 500;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
            font-size: 0.95rem;
        }

        .nav-btn.primary {
            background: #2563eb;
            color: white;
        }

        .nav-btn.primary:hover {
            background: #1d4ed8;
            transform: translateY(-1px);
        }

        .nav-btn.secondary {
            color: #374151;
            background: transparent;
        }

        .nav-btn.secondary:hover {
            background: #f3f4f6;
        }

        .user-menu {
            display: none;
            align-items: center;
            gap: 0.5rem;
            color: #2563eb;
            font-weight: 600;
            cursor: pointer;
        }

        .user-menu:hover {
            text-decoration: underline;
        }

        /* Main Content */
        main {
            margin-top: 80px;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 2rem;
        }

        /* Hero Section */
        .hero {
            padding: 4rem 0 3rem;
            text-align: center;
        }

        .hero h1 {
            font-size: 3.5rem;
            font-weight: 800;
            color: #111827;
            margin-bottom: 1.5rem;
            letter-spacing: -1px;
        }

        .hero p {
            font-size: 1.3rem;
            color: #6b7280;
            margin-bottom: 2.5rem;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }

        .cta-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        .cta-btn {
            padding: 16px 32px;
            border-radius: 30px;
            font-size: 1.1rem;
            font-weight: 600;
            text-decoration: none;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
        }

        .cta-btn.primary {
            background: linear-gradient(135deg, #2563eb, #1d4ed8);
            color: white;
            box-shadow: 0 4px 15px rgba(37, 99, 235, 0.3);
        }

        .cta-btn.primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(37, 99, 235, 0.4);
        }

        .cta-btn.secondary {
            background: white;
            color: #374151;
            border: 2px solid #e5e7eb;
        }

        .cta-btn.secondary:hover {
            border-color: #2563eb;
            color: #2563eb;
            transform: translateY(-2px);
        }

        /* Categories */
        .categories {
            padding: 4rem 0;
            background: white;
            margin: 3rem 0;
            border-radius: 24px;
        }

        .section-title {
            text-align: center;
            font-size: 2.5rem;
            font-weight: 700;
            color: #111827;
            margin-bottom: 3rem;
        }

        .category-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 2rem;
        }

        .category-card {
            background: linear-gradient(135deg, #f8fafc, #f1f5f9);
            padding: 2.5rem;
            border-radius: 20px;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
            border: 1px solid #e2e8f0;
        }

        .category-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            border-color: #2563eb;
        }

        .category-icon {
            font-size: 3.5rem;
            margin-bottom: 1.5rem;
            display: block;
        }

        .category-card h3 {
            font-size: 1.3rem;
            font-weight: 600;
            color: #111827;
            margin-bottom: 0.8rem;
        }

        .category-card p {
            color: #6b7280;
            font-size: 0.95rem;
        }

        /* Listings Section */
        .listings-section {
            padding: 4rem 0;
        }

        .listings-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 3rem;
        }

        .filter-bar {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        .filter-select {
            padding: 10px 16px;
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            background: white;
            font-size: 0.95rem;
            outline: none;
            transition: all 0.3s ease;
        }

        .filter-select:focus {
            border-color: #2563eb;
        }

        .listings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 2rem;
            margin-bottom: 3rem;
        }

        .listing-card {
            background: white;
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
            border: 1px solid #f1f3f4;
            position: relative;
        }

        .listing-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 35px rgba(0, 0, 0, 0.15);
        }

        .listing-image {
            height: 220px;
            background: linear-gradient(135deg, #f3f4f6, #e5e7eb);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 3rem;
            color: #9ca3af;
        }

        .listing-content {
            padding: 2rem;
        }

        .listing-type {
            display: inline-block;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
            text-transform: uppercase;
            margin-bottom: 1rem;
        }

        .type-sell { background: #dcfce7; color: #16a34a; }
        .type-rent { background: #fef3c7; color: #d97706; }
        .type-buy { background: #dbeafe; color: #2563eb; }

        .listing-title {
            font-size: 1.3rem;
            font-weight: 600;
            color: #111827;
            margin-bottom: 0.8rem;
            line-height: 1.4;
        }

        .listing-price {
            font-size: 1.5rem;
            font-weight: 700;
            color: #2563eb;
            margin-bottom: 1rem;
        }

        .listing-description {
            color: #6b7280;
            font-size: 0.95rem;
            line-height: 1.6;
            margin-bottom: 1.5rem;
        }

        .listing-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding-top: 1rem;
            border-top: 1px solid #f3f4f6;
            font-size: 0.9rem;
            color: #6b7280;
        }

        .listing-location {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .contact-buttons {
            display: flex;
            gap: 0.8rem;
            margin-top: 1rem;
        }

        .contact-btn {
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 500;
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .contact-btn.email {
            background: #2563eb;
            color: white;
        }

        .contact-btn.phone {
            background: #10b981;
            color: white;
        }

        .contact-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
        }

        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            color: #6b7280;
        }

        .empty-state h3 {
            font-size: 1.5rem;
            margin-bottom: 1rem;
            color: #374151;
        }

        .empty-state p {
            margin-bottom: 2rem;
        }

        .owner-actions {
            position: absolute;
            top: 15px;
            right: 15px;
            display: flex;
            gap: 8px;
            z-index: 10;
        }

        .owner-btn {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.9);
            border: none;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 1.1rem;
            color: #6b7280;
            transition: all 0.3s ease;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .owner-btn:hover {
            background: white;
            color: #ef4444;
            transform: scale(1.1);
        }

        .expiry-badge {
            position: absolute;
            top: 15px;
            left: 15px;
            background: rgba(0, 0, 0, 0.6);
            color: white;
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 500;
            z-index: 10;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 2000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(4px);
        }

        .modal-content {
            background: white;
            margin: 3% auto;
            padding: 3rem;
            border-radius: 24px;
            width: 90%;
            max-width: 600px;
            max-height: 85vh;
            overflow-y: auto;
            position: relative;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
        }

        .close-btn {
            position: absolute;
            right: 24px;
            top: 24px;
            background: #f3f4f6;
            border: none;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            color: #6b7280;
            transition: all 0.3s ease;
        }

        .close-btn:hover {
            background: #e5e7eb;
            color: #374151;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            font-weight: 600;
            color: #374151;
            margin-bottom: 0.5rem;
        }

        .form-input {
            width: 100%;
            padding: 14px 16px;
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            font-size: 1rem;
            outline: none;
            transition: all 0.3s ease;
        }

        .form-input:focus {
            border-color: #2563eb;
            box-shadow: 0 0 0 4px rgba(37, 99, 235, 0.1);
        }

        .form-textarea {
            height: 120px;
            resize: vertical;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
        }

        .submit-btn {
            width: 100%;
            padding: 16px;
            background: linear-gradient(135deg, #2563eb, #1d4ed8);
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 1rem;
        }

        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(37, 99, 235, 0.4);
        }

        .confirm-btn {
            width: 100%;
            padding: 16px;
            background: #ef4444;
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 1rem;
        }

        .confirm-btn:hover {
            background: #dc2626;
            transform: translateY(-2px);
        }

        .cancel-btn {
            width: 100%;
            padding: 16px;
            background: #9ca3af;
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 1rem;
        }

        .cancel-btn:hover {
            background: #6b7280;
        }

        /* Auth Modal Styles */
        .auth-container {
            max-width: 400px;
            margin: 0 auto;
        }

        .auth-tabs {
            display: flex;
            margin-bottom: 2rem;
            border-bottom: 2px solid #e5e7eb;
        }

        .auth-tab {
            flex: 1;
            text-align: center;
            padding: 1rem;
            cursor: pointer;
            font-weight: 600;
            color: #6b7280;
            transition: all 0.3s ease;
        }

        .auth-tab.active {
            color: #2563eb;
            border-bottom: 2px solid #2563eb;
            margin-bottom: -2px;
        }

        .auth-form {
            display: none;
        }

        .auth-form.active {
            display: block;
        }

        .auth-message {
            text-align: center;
            padding: 2rem;
            background: #f9fafb;
            border-radius: 12px;
            margin-top: 2rem;
        }

        .auth-message h3 {
            margin-bottom: 1rem;
            color: #374151;
        }

        /* My Listings Section */
        .my-listings-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 2rem;
            margin-bottom: 3rem;
        }

        /* Notification */
        .notification {
            position: fixed;
            top: 100px;
            right: 20px;
            background: #10b981;
            color: white;
            padding: 1rem 2rem;
            border-radius: 12px;
            font-weight: 600;
            z-index: 3000;
            animation: fadeInUp 0.3s ease-out;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .header-container {
                flex-direction: column;
                gap: 1rem;
                padding: 1rem;
            }

            .search-container {
                margin: 0;
                max-width: 100%;
            }

            .hero h1 {
                font-size: 2.5rem;
            }

            .cta-buttons {
                flex-direction: column;
                align-items: center;
            }

            .listings-header {
                flex-direction: column;
                gap: 1rem;
                align-items: stretch;
            }

            .filter-bar {
                flex-direction: column;
            }

            .listings-grid {
                grid-template-columns: 1fr;
            }

            .form-row {
                grid-template-columns: 1fr;
            }

            .modal-content {
                margin: 5% auto;
                padding: 2rem;
            }
        }

        /* Animations */
        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .fade-in {
            animation: fadeInUp 0.6s ease-out;
        }

        /* Image Upload and Display Styles */
        .image-preview-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }

        .image-preview-item {
            position: relative;
            border-radius: 8px;
            overflow: hidden;
            background: #f3f4f6;
        }

        .image-preview-img {
            width: 100%;
            height: 120px;
            object-fit: cover;
            display: block;
        }

        .image-remove-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(239, 68, 68, 0.9);
            color: white;
            border: none;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            transition: all 0.3s ease;
        }

        .image-remove-btn:hover {
            background: #dc2626;
            transform: scale(1.1);
        }

        .listing-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .listing-image.has-images {
            background: none;
            font-size: 0;
            color: transparent;
            padding: 0;
        }

        .listing-images-carousel {
            position: relative;
            width: 100%;
            height: 100%;
        }

        .listing-image-slide {
            width: 100%;
            height: 100%;
            object-fit: cover;
            display: none;
        }

        .listing-image-slide.active {
            display: block;
        }

        .image-nav-btn {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            background: rgba(0, 0, 0, 0.5);
            color: white;
            border: none;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            transition: all 0.3s ease;
            z-index: 5;
        }

        .image-nav-btn:hover {
            background: rgba(0, 0, 0, 0.8);
        }

        .image-nav-btn.prev {
            left: 10px;
        }

        .image-nav-btn.next {
            right: 10px;
        }

        .image-counter {
            position: absolute;
            bottom: 10px;
            right: 10px;
            background: rgba(0, 0, 0, 0.6);
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
            font-weight: 500;
            z-index: 5;
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header>
        <div class="header-container">
            <a href="index.html" class="logo">BSR</a>
            <div class="search-container">
                <span class="search-icon">🔍</span>
                <input type="text" class="search-bar" placeholder="Search listings..." id="searchInput">
            </div>
            <nav class="nav-links">
                <button class="nav-btn primary" id="postButton" onclick="checkAuthBeforePosting()">📝 Post Listing</button>
                <a href="#" class="nav-btn secondary" id="myListingsButton" style="display: none;" onclick="showMyListings()">📋 My Listings</a>
                <a href="#" class="nav-btn secondary" id="bookmarksButton" style="display: none;" onclick="showBookmarks()">❤️ Saved</a>
                <a href="#" class="nav-btn secondary" id="loginButton" onclick="openModal('authModal')">👤 Sign In</a>
                <div class="user-menu" id="userMenu">
                    <span id="userName"></span>
                    <button class="nav-btn secondary" onclick="logout()">Logout</button>
                </div>
            </nav>
        </div>
    </header>

    <!-- Main Content -->
    <main>
        <div class="container">
            <!-- Hero Section -->
            <section class="hero">
                <h1>Local Marketplace</h1>
                <p>Connect with people in your area to buy, sell, and rent items safely</p>
                <div class="cta-buttons">
                    <button class="cta-btn primary" id="heroPostButton" onclick="checkAuthBeforePosting()">Post Your Listing</button>
                    <a href="#categories" class="cta-btn secondary">Explore Categories</a>
                </div>
            </section>

            <!-- Categories -->
            <section class="categories" id="categories">
                <h2 class="section-title">Browse Categories</h2>
                <div class="category-grid">
                    <div class="category-card" onclick="filterByCategory('electronics')">
                        <span class="category-icon">📱</span>
                        <h3>Electronics</h3>
                        <p>Phones, computers, gaming, and tech accessories</p>
                    </div>
                    <div class="category-card" onclick="filterByCategory('vehicles')">
                        <span class="category-icon">🚗</span>
                        <h3>Vehicles</h3>
                        <p>Cars, motorcycles, bikes, and automotive parts</p>
                    </div>
                    <div class="category-card" onclick="filterByCategory('home')">
                        <span class="category-icon">🏠</span>
                        <h3>Home & Garden</h3>
                        <p>Furniture, appliances, decor, and outdoor items</p>
                    </div>
                    <div class="category-card" onclick="filterByCategory('fashion')">
                        <span class="category-icon">👔</span>
                        <h3>Fashion</h3>
                        <p>Clothing, shoes, accessories, and jewelry</p>
                    </div>
                    <div class="category-card" onclick="filterByCategory('sports')">
                        <span class="category-icon">⚽</span>
                        <h3>Sports & Recreation</h3>
                        <p>Equipment, fitness gear, and outdoor activities</p>
                    </div>
                    <div class="category-card" onclick="filterByCategory('books')">
                        <span class="category-icon">📚</span>
                        <h3>Books & Media</h3>
                        <p>Books, movies, music, and educational materials</p>
                    </div>
                </div>
            </section>

            <!-- Main Listings Section -->
            <section class="listings-section" id="mainListings">
                <div class="listings-header">
                    <h2 class="section-title">Recent Listings</h2>
                    <div class="filter-bar">
                        <select class="filter-select" id="categoryFilter">
                            <option value="">All Categories</option>
                            <option value="electronics">Electronics</option>
                            <option value="vehicles">Vehicles</option>
                            <option value="home">Home & Garden</option>
                            <option value="fashion">Fashion</option>
                            <option value="sports">Sports & Recreation</option>
                            <option value="books">Books & Media</option>
                        </select>
                        <select class="filter-select" id="typeFilter">
                            <option value="">All Types</option>
                            <option value="sell">For Sale</option>
                            <option value="rent">For Rent</option>
                            <option value="buy">Looking to Buy</option>
                        </select>
                        <select class="filter-select" id="sortFilter" onchange="sortListings(this.value)">
                            <option value="newest">Newest First</option>
                            <option value="oldest">Oldest First</option>
                            <option value="price-low">Price: Low to High</option>
                            <option value="price-high">Price: High to Low</option>
                            <option value="expiry">Expiring Soon</option>
                        </select>
                    </div>
                </div>
                <div class="listings-grid" id="listingsGrid">
                    <!-- Listings will be populated here -->
                </div>
            </section>

            <!-- My Listings Section (Initially Hidden) -->
            <section class="listings-section" id="myListingsSection" style="display: none;">
                <div class="listings-header">
                    <h2 class="section-title">My Listings</h2>
                    <div id="listingStats" style="margin-bottom: 1rem; text-align: center; color: #6b7280;"></div>
                    <button class="nav-btn primary" onclick="showMainListings()">← Back to All Listings</button>
                </div>
                <div class="my-listings-grid" id="myListingsGrid">
                    <!-- User's listings will be populated here -->
                </div>
            </section>

            <!-- Bookmarks Section (Initially Hidden) -->
            <section class="listings-section" id="bookmarksSection" style="display: none;">
                <div class="listings-header">
                    <h2 class="section-title">Saved Listings</h2>
                    <button class="nav-btn primary" onclick="showMainListings()">← Back to All Listings</button>
                </div>
                <div class="listings-grid" id="bookmarksGrid">
                    <!-- Bookmarked listings will be populated here -->
                </div>
            </section>
        </div>
    </main>

    <!-- Authentication Modal -->
    <div id="authModal" class="modal">
        <div class="modal-content">
            <button class="close-btn" onclick="closeModal('authModal')">&times;</button>
            <div class="auth-container">
                <div class="auth-tabs">
                    <div class="auth-tab active" id="loginTab" onclick="switchAuthTab('login')">Login</div>
                    <div class="auth-tab" id="registerTab" onclick="switchAuthTab('register')">Register</div>
                </div>
                
                <!-- Login Form -->
                <form id="loginForm" class="auth-form active">
                    <div class="form-group">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-input" id="loginEmail" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Password</label>
                        <input type="password" class="form-input" id="loginPassword" required>
                    </div>
                    <button type="submit" class="submit-btn">Sign In</button>
                </form>
                
                <!-- Register Form -->
                <form id="registerForm" class="auth-form">
                    <div class="form-group">
                        <label class="form-label">Full Name</label>
                        <input type="text" class="form-input" id="registerName" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Email</label>
                        <input type="email" class="form-input" id="registerEmail" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Password</label>
                        <input type="password" class="form-input" id="registerPassword" required minlength="6">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Confirm Password</label>
                        <input type="password" class="form-input" id="registerConfirmPassword" required minlength="6">
                    </div>
                    <button type="submit" class="submit-btn">Create Account</button>
                </form>
            </div>
        </div>
    </div>

    <!-- Post Listing Modal -->
    <div id="postModal" class="modal">
        <div class="modal-content">
            <button class="close-btn" onclick="closeModal('postModal')">&times;</button>
            <h2 style="font-size: 2rem; margin-bottom: 2rem; color: #111827;">Create New Listing</h2>
            <form id="postForm">
                <div class="form-group">
                    <label class="form-label">Title *</label>
                    <input type="text" class="form-input" id="postTitle" required placeholder="What are you listing?">
                </div>
                
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Category *</label>
                        <select class="form-input" id="postCategory" required>
                            <option value="">Select Category</option>
                            <option value="electronics">Electronics</option>
                            <option value="vehicles">Vehicles</option>
                            <option value="home">Home & Garden</option>
                            <option value="fashion">Fashion</option>
                            <option value="sports">Sports & Recreation</option>
                            <option value="books">Books & Media</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Type *</label>
                        <select class="form-input" id="postType" required>
                            <option value="">Select Type</option>
                            <option value="sell">For Sale</option>
                            <option value="rent">For Rent</option>
                            <option value="buy">Looking to Buy</option>
                        </select>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Price ($) *</label>
                        <input type="number" class="form-input" id="postPrice" min="0" step="0.01" required>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Location *</label>
                        <input type="text" class="form-input" id="postLocation" required placeholder="City, State">
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">Description *</label>
                    <textarea class="form-input form-textarea" id="postDescription" required placeholder="Describe your item..."></textarea>
                </div>

                <div class="form-group">
                    <label class="form-label">Images (Optional)</label>
                    <input type="file" class="form-input" id="postImages" accept="image/*" multiple>
                    <small style="color: #6b7280; margin-top: 0.5rem; display: block;">You can upload multiple images (max 5). Supported formats: JPG, PNG, GIF</small>
                    <div id="imagePreview" class="image-preview-container"></div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Phone Number (Optional)</label>
                        <input type="tel" class="form-input" id="postPhone" placeholder="(555) 123-4567">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Listing Duration *</label>
                        <select class="form-input" id="postDuration" required>
                            <option value="24">24 Hours</option>
                            <option value="48" selected>48 Hours</option>
                            <option value="72">72 Hours</option>
                            <option value="168">7 Days</option>
                            <option value="336">14 Days</option>
                        </select>
                    </div>
                </div>

                <button type="submit" class="submit-btn">Post Listing</button>
            </form>
        </div>
    </div>

    <!-- Auth Required Message Modal -->
    <div id="authRequiredModal" class="modal">
        <div class="modal-content">
            <button class="close-btn" onclick="closeModal('authRequiredModal')">&times;</button>
            <div class="auth-message">
                <h3>Sign in required</h3>
                <p>You need to be signed in to post a listing on BSR.</p>
                <button class="submit-btn" onclick="closeModal('authRequiredModal'); openModal('authModal');">Sign In or Register</button>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div id="deleteModal" class="modal">
        <div class="modal-content">
            <button class="close-btn" onclick="closeModal('deleteModal')">&times;</button>
            <div class="auth-message">
                <h3>Confirm Deletion</h3>
                <p>Are you sure you want to delete this listing? This action cannot be undone.</p>
                <input type="hidden" id="deleteListingId">
                <div style="display: flex; gap: 1rem; margin-top: 2rem;">
                    <button class="cancel-btn" onclick="closeModal('deleteModal')">Cancel</button>
                    <button class="confirm-btn" onclick="confirmDeleteListing()">Delete Listing</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // User authentication
        let currentUser = JSON.parse(localStorage.getItem('bsrCurrentUser'));
        let users = JSON.parse(localStorage.getItem('bsrUsers')) || [];
        
        // Listings storage
        let listings = JSON.parse(localStorage.getItem('bsrListings')) || [];
        let filteredListings = [...listings];

        // Check authentication status and update UI
        function updateAuthUI() {
            const loginButton = document.getElementById('loginButton');
            const userMenu = document.getElementById('userMenu');
            const userName = document.getElementById('userName');
            const myListingsButton = document.getElementById('myListingsButton');
            const bookmarksButton = document.getElementById('bookmarksButton');
            
            if (currentUser) {
                loginButton.style.display = 'none';
                userMenu.style.display = 'flex';
                userName.textContent = currentUser.name;
                myListingsButton.style.display = 'block';
                bookmarksButton.style.display = 'block';
            } else {
                loginButton.style.display = 'block';
                userMenu.style.display = 'none';
                myListingsButton.style.display = 'none';
                bookmarksButton.style.display = 'none';
            }
        }

        // Check authentication before posting
        function checkAuthBeforePosting() {
            if (currentUser) {
                openModal('postModal');
            } else {
                openModal('authRequiredModal');
            }
        }

        // Auth tab switching
        function switchAuthTab(tab) {
            document.querySelectorAll('.auth-tab').forEach(t => t.classList.remove('active'));
            document.querySelectorAll('.auth-form').forEach(f => f.classList.remove('active'));
            
            if (tab === 'login') {
                document.getElementById('loginTab').classList.add('active');
                document.getElementById('loginForm').classList.add('active');
            } else {
                document.getElementById('registerTab').classList.add('active');
                document.getElementById('registerForm').classList.add('active');
            }
        }

        // Login function
        function login(email, password) {
            const user = users.find(u => u.email === email && u.password === password);
            if (user) {
                currentUser = {
                    id: user.id,
                    name: user.name,
                    email: user.email
                };
                localStorage.setItem('bsrCurrentUser', JSON.stringify(currentUser));
                updateAuthUI();
                closeModal('authModal');
                showNotification('Logged in successfully!');
                return true;
            }
            return false;
        }

        // Register function
        function register(name, email, password) {
            if (users.some(u => u.email === email)) {
                showNotification('Email already registered', 'error');
                return false;
            }
            
            const newUser = {
                id: Date.now(),
                name,
                email,
                password
            };
            
            users.push(newUser);
            localStorage.setItem('bsrUsers', JSON.stringify(users));
            
            // Auto login after registration
            currentUser = {
                id: newUser.id,
                name: newUser.name,
                email: newUser.email
            };
            localStorage.setItem('bsrCurrentUser', JSON.stringify(currentUser));
            
            updateAuthUI();
            closeModal('authModal');
            showNotification('Account created successfully!');
            return true;
        }

        // Logout function
        function logout() {
            currentUser = null;
            localStorage.removeItem('bsrCurrentUser');
            updateAuthUI();
            showNotification('Logged out');
            showMainListings();
        }

        // Calculate expiration time and formatted display
        function calculateExpiry(listing) {
            const now = Date.now();
            const expiryTime = listing.timestamp + (listing.duration * 60 * 60 * 1000);
            const timeLeft = expiryTime - now;
            
            if (timeLeft <= 0) {
                return { expired: true, display: "Expired" };
            }
            
            // Convert to hours
            const hoursLeft = Math.floor(timeLeft / (1000 * 60 * 60));
            
            if (hoursLeft < 1) {
                const minutesLeft = Math.floor(timeLeft / (1000 * 60));
                return { expired: false, display: `${minutesLeft}m left` };
            } else if (hoursLeft < 24) {
                return { expired: false, display: `${hoursLeft}h left` };
            } else {
                const daysLeft = Math.floor(hoursLeft / 24);
                return { expired: false, display: `${daysLeft}d left` };
            }
        }

        // Filter out expired listings
        function filterExpiredListings() {
            const now = Date.now();
            listings = listings.filter(listing => {
                const expiryTime = listing.timestamp + (listing.duration * 60 * 60 * 1000);
                return now < expiryTime;
            });
            localStorage.setItem('bsrListings', JSON.stringify(listings));
        }

        // Display listings
        function displayListings() {
            // First filter out expired listings
            filterExpiredListings();
            
            const grid = document.getElementById('listingsGrid');
            
            if (filteredListings.length === 0) {
                grid.innerHTML = `
                    <div class="empty-state" style="grid-column: 1 / -1;">
                        <h3>No listings yet</h3>
                        <p>Be the first to post a listing in your area!</p>
                        <button class="cta-btn primary" onclick="checkAuthBeforePosting()">Post First Listing</button>
                    </div>
                `;
                return;
            }

            grid.innerHTML = '';
            filteredListings.forEach((listing, index) => {
                const expiry = calculateExpiry(listing);
                if (expiry.expired) return; // Skip expired listings
                
                const listingCard = document.createElement('div');
                listingCard.className = 'listing-card fade-in';
                listingCard.style.animationDelay = `${index * 0.1}s`;
                
                const priceText = listing.type === 'rent' ? `$${listing.price}/day` : 
                                  listing.type === 'buy' ? `Budget: $${listing.price}` : `$${listing.price}`;
                
                const typeText = listing.type === 'buy' ? 'wanted' : listing.type;
                
                // Check if current user is the owner
                const isOwner = currentUser && listing.userId === currentUser.id;
                const isBookmarkedListing = currentUser && isBookmarked(listing.id);
                
                // Create the owner controls if needed
                const ownerControls = isOwner ? `
                    <div class="owner-actions">
                        <button class="owner-btn" title="Delete listing" onclick="deleteListing(${listing.id})">🗑️</button>
                    </div>
                ` : `
                    <div class="owner-actions">
                        <button class="owner-btn" title="${isBookmarkedListing ? 'Remove bookmark' : 'Bookmark'}" onclick="toggleBookmark(${listing.id})">${isBookmarkedListing ? '❤️' : '🤍'}</button>
                        <button class="owner-btn" title="Report listing" onclick="reportListing(${listing.id})">⚠️</button>
                    </div>
                `;
                
                listingCard.setAttribute('data-listing-id', listing.id);
                
                listingCard.innerHTML = `
                    <div class="expiry-badge">${expiry.display}</div>
                    ${ownerControls}
                    ${createImageCarousel(listing.images, listing.id)}
                    <div class="listing-content">
                        <span class="listing-type type-${listing.type}">${typeText}</span>
                        <h3 class="listing-title">${listing.title}</h3>
                        <div class="listing-price">${priceText}</div>
                        <p class="listing-description">${listing.description}</p>
                        <div class="contact-buttons">
                            ${listing.phone ? `<a href="tel:${listing.phone}" class="contact-btn phone">📞 Call</a>` : ''}
                            <button class="contact-btn email" onclick="contactSeller(${JSON.stringify(listing).replace(/"/g, '&quot;')})">✉️ Email</button>
                        </div>
                        <div class="listing-meta">
                            <span class="listing-location">📍 ${listing.location}</span>
                            <span>📅 ${listing.posted}</span>
                        </div>
                    </div>
                `;
                grid.appendChild(listingCard);
            });
        }

        // Display user's listings
        function displayMyListings() {
            if (!currentUser) return;
            
            // First filter out expired listings
            filterExpiredListings();
            
            const grid = document.getElementById('myListingsGrid');
            const statsDiv = document.getElementById('listingStats');
            
            // Filter listings by current user
            const myListings = listings.filter(listing => listing.userId === currentUser.id);
            
            // Update stats
            const stats = getListingStats();
            if (stats) {
                statsDiv.innerHTML = `📊 Total: ${stats.total} | ✅ Active: ${stats.active} | ⏰ Expired: ${stats.expired}`;
            }
            
            if (myListings.length === 0) {
                grid.innerHTML = `
                    <div class="empty-state" style="grid-column: 1 / -1;">
                        <h3>You don't have any listings yet</h3>
                        <p>Start selling or renting your items now!</p>
                        <button class="cta-btn primary" onclick="checkAuthBeforePosting()">Post Your First Listing</button>
                    </div>
                `;
                return;
            }

            grid.innerHTML = '';
            myListings.forEach((listing, index) => {
                const expiry = calculateExpiry(listing);
                
                const listingCard = document.createElement('div');
                listingCard.className = 'listing-card fade-in';
                listingCard.style.animationDelay = `${index * 0.1}s`;
                
                const priceText = listing.type === 'rent' ? `$${listing.price}/day` : 
                                  listing.type === 'buy' ? `Budget: $${listing.price}` : `$${listing.price}`;
                
                const typeText = listing.type === 'buy' ? 'wanted' : listing.type;
                
                const statusClass = expiry.expired ? 'type-buy' : 'type-' + listing.type;
                const statusText = expiry.expired ? 'EXPIRED' : typeText;
                
                listingCard.setAttribute('data-listing-id', listing.id);
                
                listingCard.innerHTML = `
                    <div class="expiry-badge">${expiry.display}</div>
                    <div class="owner-actions">
                        <button class="owner-btn" title="Delete listing" onclick="deleteListing(${listing.id})">🗑️</button>
                    </div>
                    ${createImageCarousel(listing.images, listing.id)}
                    <div class="listing-content">
                        <span class="listing-type ${statusClass}">${statusText}</span>
                        <h3 class="listing-title">${listing.title}</h3>
                        <div class="listing-price">${priceText}</div>
                        <p class="listing-description">${listing.description}</p>
                        <div class="listing-meta">
                            <span class="listing-location">📍 ${listing.location}</span>
                            <span>📅 ${listing.posted}</span>
                        </div>
                    </div>
                `;
                grid.appendChild(listingCard);
            });
        }

        // Display bookmarked listings
        function displayBookmarks() {
            if (!currentUser) return;
            
            const grid = document.getElementById('bookmarksGrid');
            
            // Get user's bookmarked listings
            const userBookmarks = bookmarkedListings.filter(b => b.startsWith(`${currentUser.id}-`));
            const bookmarkedIds = userBookmarks.map(b => parseInt(b.split('-')[1]));
            const bookmarkedListingObjects = listings.filter(l => bookmarkedIds.includes(l.id));
            
            if (bookmarkedListingObjects.length === 0) {
                grid.innerHTML = `
                    <div class="empty-state" style="grid-column: 1 / -1;">
                        <h3>No saved listings yet</h3>
                        <p>Bookmark listings you're interested in for easy access later!</p>
                        <button class="cta-btn primary" onclick="showMainListings()">Browse Listings</button>
                    </div>
                `;
                return;
            }

            grid.innerHTML = '';
            bookmarkedListingObjects.forEach((listing, index) => {
                const expiry = calculateExpiry(listing);
                if (expiry.expired) return; // Skip expired listings
                
                const listingCard = document.createElement('div');
                listingCard.className = 'listing-card fade-in';
                listingCard.style.animationDelay = `${index * 0.1}s`;
                
                const priceText = listing.type === 'rent' ? `$${listing.price}/day` : 
                                  listing.type === 'buy' ? `Budget: $${listing.price}` : `$${listing.price}`;
                
                const typeText = listing.type === 'buy' ? 'wanted' : listing.type;
                
                listingCard.setAttribute('data-listing-id', listing.id);
                
                listingCard.innerHTML = `
                    <div class="expiry-badge">${expiry.display}</div>
                    <div class="owner-actions">
                        <button class="owner-btn" title="Remove bookmark" onclick="toggleBookmark(${listing.id})">❤️</button>
                    </div>
                    ${createImageCarousel(listing.images, listing.id)}
                    <div class="listing-content">
                        <span class="listing-type type-${listing.type}">${typeText}</span>
                        <h3 class="listing-title">${listing.title}</h3>
                        <div class="listing-price">${priceText}</div>
                        <p class="listing-description">${listing.description}</p>
                        <div class="contact-buttons">
                            ${listing.phone ? `<a href="tel:${listing.phone}" class="contact-btn phone">📞 Call</a>` : ''}
                            <button class="contact-btn email" onclick="contactSeller(${JSON.stringify(listing).replace(/"/g, '&quot;')})">✉️ Email</button>
                        </div>
                        <div class="listing-meta">
                            <span class="listing-location">📍 ${listing.location}</span>
                            <span>📅 ${listing.posted}</span>
                        </div>
                    </div>
                `;
                grid.appendChild(listingCard);
            });
        }

        // Show bookmarks section
        function showBookmarks() {
            document.getElementById('mainListings').style.display = 'none';
            document.getElementById('myListingsSection').style.display = 'none';
            document.getElementById('bookmarksSection').style.display = 'block';
            displayBookmarks();
        }

        // Filter functions
        function filterByCategory(category) {
            document.getElementById('categoryFilter').value = category;
            applyFilters();
        }

        function applyFilters() {
            const category = document.getElementById('categoryFilter').value;
            const type = document.getElementById('typeFilter').value;
            
            filteredListings = listings.filter(listing => {
                return (!category || listing.category === category) &&
                       (!type || listing.type === type);
            });
            
            displayListings();
        }

        // Search function
        function searchListings() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            filteredListings = listings.filter(listing => 
                listing.title.toLowerCase().includes(searchTerm) ||
                listing.description.toLowerCase().includes(searchTerm) ||
                listing.category.toLowerCase().includes(searchTerm) ||
                listing.location.toLowerCase().includes(searchTerm)
            );
            displayListings();
        }

        // Show notification
        function showNotification(message, type = 'success') {
            const notification = document.createElement('div');
            notification.className = 'notification';
            notification.innerHTML = message;
            
            if (type === 'error') {
                notification.style.background = '#ef4444';
            }
            
            document.body.appendChild(notification);
            setTimeout(() => notification.remove(), 3000);
        }

        // Modal functions
        function openModal(modalId) {
            document.getElementById(modalId).style.display = 'block';
            document.body.style.overflow = 'hidden';
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
            document.body.style.overflow = 'auto';
        }

        // View control functions
        function showMyListings() {
            document.getElementById('mainListings').style.display = 'none';
            document.getElementById('myListingsSection').style.display = 'block';
            displayMyListings();
        }

        function showMainListings() {
            document.getElementById('mainListings').style.display = 'block';
            document.getElementById('myListingsSection').style.display = 'none';
            document.getElementById('bookmarksSection').style.display = 'none';
        }

        // Enhanced sorting and view options
        function sortListings(sortBy) {
            switch(sortBy) {
                case 'newest':
                    filteredListings.sort((a, b) => b.timestamp - a.timestamp);
                    break;
                case 'oldest':
                    filteredListings.sort((a, b) => a.timestamp - b.timestamp);
                    break;
                case 'price-low':
                    filteredListings.sort((a, b) => a.price - b.price);
                    break;
                case 'price-high':
                    filteredListings.sort((a, b) => b.price - a.price);
                    break;
                case 'expiry':
                    filteredListings.sort((a, b) => {
                        const expiryA = a.timestamp + (a.duration * 60 * 60 * 1000);
                        const expiryB = b.timestamp + (b.duration * 60 * 60 * 1000);
                        return expiryA - expiryB;
                    });
                    break;
            }
            displayListings();
        }

        // Enhanced analytics for user listings
        function getListingStats() {
            if (!currentUser) return null;
            const userListings = listings.filter(l => l.userId === currentUser.id);
            const activeListings = userListings.filter(l => {
                const expiry = calculateExpiry(l);
                return !expiry.expired;
            });
            
            return {
                total: userListings.length,
                active: activeListings.length,
                expired: userListings.length - activeListings.length,
                categories: [...new Set(userListings.map(l => l.category))]
            };
        }

        // Bookmark system
        let bookmarkedListings = JSON.parse(localStorage.getItem('bsrBookmarks')) || [];
        
        function toggleBookmark(listingId) {
            if (!currentUser) {
                showNotification('Please sign in to bookmark listings', 'error');
                return;
            }
            
            const bookmarkKey = `${currentUser.id}-${listingId}`;
            const bookmarkIndex = bookmarkedListings.findIndex(b => b === bookmarkKey);
            
            if (bookmarkIndex > -1) {
                bookmarkedListings.splice(bookmarkIndex, 1);
                showNotification('Removed from bookmarks');
            } else {
                bookmarkedListings.push(bookmarkKey);
                showNotification('Added to bookmarks');
            }
            
            localStorage.setItem('bsrBookmarks', JSON.stringify(bookmarkedListings));
            
            // Refresh the current view to update bookmark icons
            if (document.getElementById('myListingsSection').style.display === 'block') {
                displayMyListings();
            } else {
                displayListings();
            }
        }
        
        function isBookmarked(listingId) {
            if (!currentUser) return false;
            const bookmarkKey = `${currentUser.id}-${listingId}`;
            return bookmarkedListings.includes(bookmarkKey);
        }

        // Contact seller with pre-filled message
        function contactSeller(listing) {
            const subject = encodeURIComponent(`Interested in: ${listing.title}`);
            const body = encodeURIComponent(
                `Hi ${listing.name},\n\nI'm interested in your listing: "${listing.title}" for $${listing.price}.\n\nCould you please provide more details?\n\nThanks!`
            );
            window.open(`mailto:${listing.email}?subject=${subject}&body=${body}`);
        }

        // Report listing functionality
        function reportListing(listingId) {
            if (!currentUser) {
                showNotification('Please sign in to report listings', 'error');
                return;
            }
            
            const reason = prompt('Please specify the reason for reporting this listing:');
            if (reason && reason.trim()) {
                // In a real application, this would send to a moderation system
                showNotification('Thank you for reporting. We will review this listing.');
                console.log(`Listing ${listingId} reported by user ${currentUser.id}: ${reason}`);
            }
        }

        // Image handling functions
        let selectedImages = [];
        const maxImages = 5;

        function handleImageSelection() {
            const fileInput = document.getElementById('postImages');
            const files = Array.from(fileInput.files);
            
            if (selectedImages.length + files.length > maxImages) {
                showNotification(`You can only upload up to ${maxImages} images`, 'error');
                return;
            }
            
            files.forEach(file => {
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const imageData = {
                            id: Date.now() + Math.random(),
                            data: e.target.result,
                            name: file.name
                        };
                        selectedImages.push(imageData);
                        updateImagePreview();
                    };
                    reader.readAsDataURL(file);
                }
            });
            
            // Clear the file input
            fileInput.value = '';
        }

        function updateImagePreview() {
            const previewContainer = document.getElementById('imagePreview');
            previewContainer.innerHTML = '';
            
            selectedImages.forEach(image => {
                const previewItem = document.createElement('div');
                previewItem.className = 'image-preview-item';
                previewItem.innerHTML = `
                    <img src="${image.data}" alt="${image.name}" class="image-preview-img">
                    <button type="button" class="image-remove-btn" onclick="removeImage('${image.id}')">&times;</button>
                `;
                previewContainer.appendChild(previewItem);
            });
        }

        function removeImage(imageId) {
            selectedImages = selectedImages.filter(img => img.id !== imageId);
            updateImagePreview();
        }

        function createImageCarousel(images, listingId) {
            if (!images || images.length === 0) {
                return '<div class="listing-image">📷</div>';
            }
            
            if (images.length === 1) {
                return `<div class="listing-image has-images"><img src="${images[0].data}" alt="Listing image"></div>`;
            }
            
            let carouselHTML = '<div class="listing-image has-images"><div class="listing-images-carousel">';
            
            images.forEach((image, index) => {
                const activeClass = index === 0 ? ' active' : '';
                carouselHTML += `<img src="${image.data}" alt="Listing image ${index + 1}" class="listing-image-slide${activeClass}">`;
            });
            
            carouselHTML += `
                <button class="image-nav-btn prev" onclick="changeImage(${listingId}, -1)">‹</button>
                <button class="image-nav-btn next" onclick="changeImage(${listingId}, 1)">›</button>
                <div class="image-counter">1/${images.length}</div>
            </div></div>`;
            
            return carouselHTML;
        }

        function changeImage(listingId, direction) {
            const carousel = document.querySelector(`[data-listing-id="${listingId}"] .listing-images-carousel`);
            if (!carousel) return;
            
            const slides = carousel.querySelectorAll('.listing-image-slide');
            const counter = carousel.querySelector('.image-counter');
            let currentIndex = Array.from(slides).findIndex(slide => slide.classList.contains('active'));
            
            slides[currentIndex].classList.remove('active');
            
            currentIndex += direction;
            if (currentIndex >= slides.length) currentIndex = 0;
            if (currentIndex < 0) currentIndex = slides.length - 1;
            
            slides[currentIndex].classList.add('active');
            counter.textContent = `${currentIndex + 1}/${slides.length}`;
        }

        // Delete listing
        function deleteListing(listingId) {
            document.getElementById('deleteListingId').value = listingId;
            openModal('deleteModal');
        }

        function confirmDeleteListing() {
            const listingId = parseInt(document.getElementById('deleteListingId').value);
            listings = listings.filter(listing => listing.id !== listingId);
            localStorage.setItem('bsrListings', JSON.stringify(listings));
            filteredListings = [...listings];
            
            closeModal('deleteModal');
            
            // Refresh the current view
            if (document.getElementById('myListingsSection').style.display === 'block') {
                displayMyListings();
            } else {
                displayListings();
            }
            
            showNotification('Listing deleted successfully');
        }

        // Event Listeners
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize UI based on authentication status
            updateAuthUI();
            
            // Check for expired listings and display
            filterExpiredListings();
            displayListings();
            
            // Login form submission
            document.getElementById('loginForm').addEventListener('submit', function(e) {
                e.preventDefault();
                const email = document.getElementById('loginEmail').value;
                const password = document.getElementById('loginPassword').value;
                
                if (!login(email, password)) {
                    showNotification('Invalid email or password', 'error');
                }
            });
            
            // Register form submission
            document.getElementById('registerForm').addEventListener('submit', function(e) {
                e.preventDefault();
                const name = document.getElementById('registerName').value;
                const email = document.getElementById('registerEmail').value;
                const password = document.getElementById('registerPassword').value;
                const confirmPassword = document.getElementById('registerConfirmPassword').value;
                
                if (password !== confirmPassword) {
                    showNotification('Passwords do not match', 'error');
                    return;
                }
                
                register(name, email, password);
            });
            
            // Image upload event listener
            document.getElementById('postImages').addEventListener('change', handleImageSelection);

            // Post listing form submission
            document.getElementById('postForm').addEventListener('submit', function(e) {
                e.preventDefault();
                
                if (!currentUser) {
                    closeModal('postModal');
                    openModal('authRequiredModal');
                    return;
                }
                
                const duration = parseInt(document.getElementById('postDuration').value);
                const durationText = duration <= 24 ? '24 hours' : 
                                    duration <= 48 ? '48 hours' : 
                                    duration <= 72 ? '3 days' : 
                                    duration <= 168 ? '7 days' : '14 days';
                
                const newListing = {
                    id: Date.now(),
                    title: document.getElementById('postTitle').value,
                    price: parseFloat(document.getElementById('postPrice').value),
                    type: document.getElementById('postType').value,
                    category: document.getElementById('postCategory').value,
                    description: document.getElementById('postDescription').value,
                    location: document.getElementById('postLocation').value,
                    phone: document.getElementById('postPhone').value,
                    email: currentUser.email,
                    name: currentUser.name,
                    userId: currentUser.id,
                    posted: 'Just now',
                    timestamp: Date.now(),
                    duration: duration, // Duration in hours
                    images: [...selectedImages] // Store the selected images
                };
                
                listings.unshift(newListing);
                localStorage.setItem('bsrListings', JSON.stringify(listings));
                filteredListings = [...listings];
                displayListings();
                closeModal('postModal');
                this.reset();
                
                // Clear selected images
                selectedImages = [];
                updateImagePreview();
                
                showNotification(`Listing posted successfully! It will expire in ${durationText}.`);
            });
            
            // Search functionality
            document.getElementById('searchInput').addEventListener('input', searchListings);
            
            // Filter listeners
            document.getElementById('categoryFilter').addEventListener('change', applyFilters);
            document.getElementById('typeFilter').addEventListener('change', applyFilters);
            
            // Set up periodic checking for expired listings (every minute)
            setInterval(() => {
                filterExpiredListings();
                if (document.getElementById('myListingsSection').style.display === 'block') {
                    displayMyListings();
                } else {
                    displayListings();
                }
            }, 60000);
        });

        // Close modal on outside click
        window.onclick = function(event) {
            if (event.target.classList.contains('modal')) {
                event.target.style.display = 'none';
                document.body.style.overflow = 'auto';
            }
        }
    </script>
</body>
</html>